/*
문제
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

출력
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.
*/

from collections import deque

# 입력받기
N, K = map(int, input().split())

# BFS 함수 정의
def bfs(start, target):
    # 방문 여부와 시간 저장 리스트
    visited = [False] * 100001  # 수빈이가 갈 수 있는 위치 범위: 0 ~ 100000
    queue = deque([(start, 0)])  # (현재 위치, 현재까지 소요된 시간)
    visited[start] = True  # 시작 위치 방문 표시

    while queue:
        current, time = queue.popleft()

        # 동생 위치에 도달하면 시간 반환
        if current == target:
            return time

        # 이동 가능한 세 가지 경우 탐색
        for next_pos in (current - 1, current + 1, current * 2):
            if 0 <= next_pos <= 100000 and not visited[next_pos]:
                visited[next_pos] = True  # 방문 표시
                queue.append((next_pos, time + 1))  # 다음 위치와 시간 추가

# BFS 호출 및 결과 출력
print(bfs(N, K))
