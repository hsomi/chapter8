/*
문제
그래프의 정점의 집합을 둘로 분할하여, 각 집합에 속한 정점끼리는 서로 인접하지 않도록 분할할 수 있을 때, 그러한 그래프를 특별히 이분 그래프 (Bipartite Graph) 라 부른다.

그래프가 입력으로 주어졌을 때, 이 그래프가 이분 그래프인지 아닌지 판별하는 프로그램을 작성하시오.

입력
입력은 여러 개의 테스트 케이스로 구성되어 있는데, 첫째 줄에 테스트 케이스의 개수 K가 주어진다. 각 테스트 케이스의 첫째 줄에는 그래프의 정점의 개수 V와 간선의 개수 E가 빈 칸을 사이에 두고 순서대로 주어진다. 각 정점에는 1부터 V까지 차례로 번호가 붙어 있다. 이어서 둘째 줄부터 E개의 줄에 걸쳐 간선에 대한 정보가 주어지는데, 각 줄에 인접한 두 정점의 번호 u, v (u ≠ v)가 빈 칸을 사이에 두고 주어진다. 

출력
K개의 줄에 걸쳐 입력으로 주어진 그래프가 이분 그래프이면 YES, 아니면 NO를 순서대로 출력한다.

제한
2 ≤ K ≤ 5
1 ≤ V ≤ 20,000
1 ≤ E ≤ 200,000
*/

from collections import deque
import sys
input = sys.stdin.read  # 입력을 한번에 읽음

def is_bipartite_graph(V, E, edges):
    # 그래프를 인접 리스트로 표현
    graph = [[] for _ in range(V + 1)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    # 각 정점의 색깔을 저장 (-1: 방문 안 함, 0: 그룹 1, 1: 그룹 2)
    colors = [-1] * (V + 1)
    
    # BFS 함수
    def bfs(start):
        queue = deque([start])
        colors[start] = 0  # 시작점을 그룹 1로 지정
        while queue:
            current = queue.popleft()
            for neighbor in graph[current]:
                if colors[neighbor] == -1:  # 방문하지 않은 경우
                    colors[neighbor] = 1 - colors[current]  # 다른 색으로 색칠
                    queue.append(neighbor)
                elif colors[neighbor] == colors[current]:  # 같은 색이면 이분 그래프 아님
                    return False
        return True

    # 모든 정점에 대해 연결 성분 체크
    for i in range(1, V + 1):
        if colors[i] == -1:  # 방문하지 않은 정점이면
            if not bfs(i):
                return "NO"
    return "YES"

# 입력 처리
data = input().splitlines()
K = int(data[0])  # 테스트 케이스 개수
results = []

index = 1
for _ in range(K):
    V, E = map(int, data[index].split())
    edges = [tuple(map(int, data[i].split())) for i in range(index + 1, index + 1 + E)]
    index += 1 + E
    results.append(is_bipartite_graph(V, E, edges))

# 결과 출력
print("\n".join(results))
