/*
문제
그래프가 주어졌을 때, 그 그래프의 최소 스패닝 트리를 구하는 프로그램을 작성하시오.

최소 스패닝 트리는, 주어진 그래프의 모든 정점들을 연결하는 부분 그래프 중에서 그 가중치의 합이 최소인 트리를 말한다.

입력
첫째 줄에 정점의 개수 V(1 ≤ V ≤ 10,000)와 간선의 개수 E(1 ≤ E ≤ 100,000)가 주어진다. 다음 E개의 줄에는 각 간선에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다. 이는 A번 정점과 B번 정점이 가중치 C인 간선으로 연결되어 있다는 의미이다. C는 음수일 수도 있으며, 절댓값이 1,000,000을 넘지 않는다.

그래프의 정점은 1번부터 V번까지 번호가 매겨져 있고, 임의의 두 정점 사이에 경로가 있다. 최소 스패닝 트리의 가중치가 -2,147,483,648보다 크거나 같고, 2,147,483,647보다 작거나 같은 데이터만 입력으로 주어진다.

출력
첫째 줄에 최소 스패닝 트리의 가중치를 출력한다.
*/

# 유니온-파인드(Union-Find) 함수 정의
def find(parent, x):
    if parent[x] != x:
        parent[x] = find(parent, parent[x])  # 경로 압축
    return parent[x]

def union(parent, rank, a, b):
    rootA = find(parent, a)
    rootB = find(parent, b)
    if rootA != rootB:
        if rank[rootA] > rank[rootB]:
            parent[rootB] = rootA
        elif rank[rootA] < rank[rootB]:
            parent[rootA] = rootB
        else:
            parent[rootB] = rootA
            rank[rootA] += 1

# 입력 처리
import sys
input = sys.stdin.read
data = input().splitlines()

V, E = map(int, data[0].split())
edges = []
for i in range(1, E + 1):
    A, B, C = map(int, data[i].split())
    edges.append((C, A, B))  # (가중치, 정점1, 정점2)

# 크루스칼 알고리즘 구현
def kruskal(V, edges):
    edges.sort()  # 가중치 기준으로 정렬
    parent = [i for i in range(V + 1)]  # 초기 부모 설정
    rank = [0] * (V + 1)  # 랭크 초기화

    mst_weight = 0
    mst_edges = 0

    for cost, a, b in edges:
        # 사이클을 형성하지 않는 경우에만 선택
        if find(parent, a) != find(parent, b):
            union(parent, rank, a, b)
            mst_weight += cost
            mst_edges += 1
            # 최소 스패닝 트리 완성 시 종료
            if mst_edges == V - 1:
                break

    return mst_weight

# 결과 출력
print(kruskal(V, edges))
